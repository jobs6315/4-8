#include<stdio.h>
#include<string.h>
#define _CRT_SECURE_NO_WARNINGS

/*int main()
{
	//int a = 16;
	//int b = a >> 1;
	//&-an2进制位与
	int a = 3;
	int b = 5;
	int c = a ^b;
	printf("%d\n", c);
	return 0;
}*/
/*int main()
{
	int a = 3;
	int b = 5;
	//int tmp = 0;临时变量
	printf("before:a=%d b=%d\n", a, b);
	//tmp = a;
	//a = b;
	//b = tmp;
	//加减法
	//a = a + b;
	//b = a - b;
	//a = a - b;
	//异或的方法
	a = a ^ b;
	b = a ^ b;
	a = a ^ b;
	printf("after:a=%d b=%d\n", a, b);
	return 0;
}*/
/*int main()
{
	int num = 0;
	scanf_s("%d",&num);
	int count = 0;
	while (num)
	{
		if (num % 2 == 1)
			count++;
		num = num / 2;
	}
	printf("二进制中1的个数=%d", count);
	return 0;
}*/
/*int main()
{
	int num = 0;
	int count = 0;
	scanf_s("%d", &num);
	int i = 0;
	for (i = 0;i < 32;i++)
	{
		if (1 == ((num >> i) & 1))
			count++;
	}
	printf("%d\n", count);
	return 0;
}*/
/*int main()
{
	//short s = 0;
	//int a = 10;
	//printf("%d\n", sizeof(s = a + 5));
	//printf("%d\n", s);
	//a = a + 2;
	
	//a = a >> 1;
	//a >>= 1;
	
	//a = a & 1;
	//a &= 1;
	//char b = 'w';
	//int arr[10] = { 0 };
	//printf("%d\n", sizeof(a));
	//printf("%d\n", sizeof(int));

	//printf("%d\n", sizeof(b));
	//printf("%d\n", sizeof(char));

	//printf("%d\n", sizeof(arr));
	int a = 11;
	//a = a | (1<< 2);
	a=a& (~(1 << 2));
	printf("%d\n", a);
	return 0;
}*/
/*int main()
{
	int a =(int) 3.14;
	//printf("%d\n", ++a);//前置++，先++，后使用
	printf("%d\n", a++);//后置++，先使用，再++
	return 0;
}*/
/*void test1(int arr[])
{
	printf("%d\n", (int)sizeof(arr));
}
void test2(char ch[])
{
	printf("%d\n", (int)sizeof(ch));
}
int main()
{
	int arr[10] = { 0 };
	char ch[10] = { 0 };
	printf("%d\n", (int)sizeof(arr));
	printf("%d\n", (int)sizeof(ch));
	test1(arr);
	test2(ch);
	return 0;
}*/
/*int main()
{
	int a = 0;
	int b = 0;
	int c = a || b;
	printf("%d", c);
	return 0;
}*/
/*int main()
{
	int i = 0, a = 1, b = 2, c = 3, d = 4;
	i = a++ || ++b || d++;
	//i = a++ && ++b && d++;
	printf("a=%d\n b=%d\n c=%d\n d=%d\n", a, b, c, d);
	return 0;
}*/
/*int main()
{
	//int a = 1;
	//int b = 2;
	//int c = (a>b,a=b+10,a,b=a+1);
	//if (a > 5)
	//	b = 3;
	//else
	//	b = -3;
	//b = (a > 5 ? 3 : -3);
	//if (a > b)
		//max = a;
	//else
		//max = b;
	//max = (a > b ? a : b);
	//printf("%d", c);
	//return 0;
	//a = get_val();
	//count_val(a);
	while (a=get_val(),count_val(a),a > 0)
	{

	}
}*/
/*int get_max(int x, int y)
{
	return x > y ? x : y;
}
int main()
{
	int a = 10;
	int b = 20;
	//调用函数的时候（）就是函数调用操作符
	int max = get_max(a, b);
	printf("max=%d\n", max);
	return 0;
}*/

//学生
//int float

//创建一个结构体类型-struct Stu
/*struct Stu
{
	//成员变量
	char name[20];
	int age;
	char id[20];
};
int main()
{
	int a = 10;
	struct Stu s1 = { "张三",20,"2019010305" };
	struct Stu* ps = &s1;
	printf("%s\n", ps->name);
	//printf("%s\n", (*ps).name);
	//printf("%d\n", (*ps).age);
	//printf("%s\n", s1.name);
	//printf("%d\n", s1.age);
	//printf("%s\n", s1.id);
	//结构体变量.成员名
	return 0;
}*/

/*int main()
{
	char a = 3;
	//00000000000000000000000000000011
	//00000011 - a

	char b = 127;
	//00000000000000000000000001111111
	//01111111 - b

	//a和b如何相加
	//00000000000000000000000000000011
	//00000000000000000000000001111111
	//00000000000000000000000010000010
	char c = a + b;
	//10000010-c
	//11111111111111111111111110000010 -补码
	//11111111111111111111111110000001 -反码
	//10000000000000000000000001111110 - 补码
	//-126
	printf("%d\n", c);
	return 0;
}*/
/*int main()
{
	char a = 0xb6;
	short b = 0xb600;
	int c = 0xb6000000;
	if (a == 0xb6)
		printf("a");
	if (b == 0xb600)
		printf("b");
	if (c == 0xb6000000)
		printf("c");
	return 0;
}*/
/*int main()
{
	char c = 1;
	printf("%u\n", (int)sizeof(c));//1
	printf("%u\n", (int)sizeof(+c));//4
	printf("%u\n", (int)sizeof(!c));//1
	return 0;
}*/
/*int main()
{
	int i = 10;
	i = i-- - --i * (i = -3) * i++ + ++i;
	printf("i=%d\n", i);
	return 0;
}*/
/*int fun()
{
	static int count = 1;
	return ++count;
}
int main()
{
	int answer;
	answer = fun() - fun() * fun();
	printf("%d\n", answer);
	return 0;
}*/
/*int main()
{
	int a = 10;//在内存中开辟一块空间
	int* p = &a;//这里我们对变量a，取用它的地址，可以使用&操作符
	             //将a的地址存放在p变量中，p就是一个指针变量
	return 0;
}*/
/*int main()
{
	//printf("%d\n", sizeof(char*));
	//printf("%d\n", sizeof(short*));
	//printf("%d\n", sizeof(int*));
	//printf("%d\n", sizeof(double*));
	
	int a = 0x11223344;
	int *pa = &a;
	//*pa = 0;
	char* pc = &a;
	
	printf("%p\n", pa);
	printf("%p\n", pa + 1);

	printf("%p\n", pc);
	printf("%p\n", pc + 1);
	
	return 0;
}*/
/*int main()
{
	int arr[10] = { 0 };
	int* p = arr;
	int i = 0;
	for (i = 0;i < 10;i++)
	{
		*(p + i) = 1;
	}
	return 0;
}*/
/*int main()
{
	//int a;局部变量不初始化，默认是随机值
	int* p;//局部的指针变量，就被初始化随机值
	*p = 20;
	return 0;
}*/
/*int main()
{
	int arr[10] = { 0 };
	int* p = arr;
	int i = 0;
	for (i = 0;i <= 11;i++)
	{
		//当指针指向的范围超出数组arr的范围是，p就是野指针
		*p = i;
	}
	return 0;
}*/
/*int* test()
{
	int a = 10;
	return& a;
}
int main()
{
	test();
	return 0;
}*/
/*int main()
{
	//未初始化的指针变量
	int* p=10;//局部变量不初始化，里面默认存放的是一个随机值
	*p = 20;
	return 0;
}*/
/*int main()
{
	int a[10] = { 0 };
	int i = 0;
	int* p = a;
	for (i = 0;i <= 12;i++)
	{
		//*p = i;
		//p++;
		*p++ = i;
	}
	return 0;
}*/
/*int main()
{
	int a = 10;
	//int b = 0;
	int* pa = &a;//初始化
	pa = NULL;//NULL-用来初始化指针的，给指针赋值
	return 0;
}*/
/*int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	int* p = arr;
	for (i = 0;i < 5;i++)
	{
		printf("%d ", *p);
		p +=2;
	}
	return 0;
}*/
/*int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	printf("%d", (int) ( & arr[9] - &arr[0]));
	return 0;
}*/
/*int my_strlen(char* str)
{
	char* start = str;
	char* end = str;
	while (*end != '\0')
	{
		end++;
	}
	return end - start;
}
int main()
{
	//strlen-求字符串的长度
	//递归-模拟实现了strlen-计数器的方式1，递归的方式2

	char arr[]="bit";
	int len = my_strlen(arr);
	printf("%d\n", len);
	return 0;

}*/
/*int main()
{
	int arr[10] = { 0 };
	//printf("%p\n", arr);
	//printf("%p\n", arr + 1);

	//printf("%p\n", &arr[0]);
	//printf("%p\n", &arr[0] + 1);

	//printf("%p\n", &arr);
	//printf("%p\n", &arr + 1);
	int* p = arr;
	int i = 0;
	for (i = 0;i < 10;i++)
	{
		//printf("%p =====  %p\n", p + i, &arr[i]);
		*(p + i) = i;
	}
	for (i = 0;i < 10;i++)
	{
		printf("%d ", *(p+i));
	}
	return 0;
}*/
/*int main()
{
	int a = 10;
	int* pa = &a;
	int** ppa = &pa;
	//int*** pppa = &ppa;
	**ppa = 20;
	printf("%d\n", **ppa);
	printf("%d\n", a);
		return 0;
}*/
/*int main()
{
	int a = 10;
	int b = 20;
	int c = 30;
	int* pa = &a;
	int* pb = &b;
	int* pc = &c;
	//int arr[10];
	int* arr2[3]={&a,&b,&c};
	int i = 0;
	for (i = 0;i < 3;i++)
	{
		printf("%d ", *arr2[i]);
	}
	return 0;
}*/
/*int main()
{
	char str[] = "hello bit";
	printf("%d %d\n", sizeof(str), strlen(str));
	return 0;
}*/

/*void BubbleSort(int a[], int len)
{
	int i, j, temp;
	for (j = 0; j < len - 1; j++)
	{
		for (i = 0; i < len - 1 - j; i++)
			if (a[i] > a[i + 1])
			{
				temp = a[i];
				a[i] = a[i + 1];
				a[i + 1] = temp;
			}
	}
}

int main()
{
	int arr[] = { 27,3,47,5,38,15,36,26,2,38,19,44,46,4,48,50 };
	int len = sizeof(arr) / sizeof(arr[0]);
	int i = 0;
	printf("排序前：");
	for (i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");

	BubbleSort(arr, len);
	printf("排序后：");
	for (i = 0; i < len; i++)
	{
		printf("%d ", arr[i]);
	}
	printf("\n");
	system("pause");
	return 0;
}*/
/*void Init(int arr[], int sz)
{
	int i = 0;
	for (i = 0;i < sz;i++)
	{
		arr[i] = 0;
	}
}*/
/*void Print(int arr[], int sz)
{
	int i = 0;
	for (i = 0;i < sz;i++)
	{
		printf("%d", arr[i]);
	}
}
void Reverse(int arr[], int sz)
{
	int left = 0;
	int right = sz - 1;
	while (left < right)
    {
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
}
int main()
{
	int arr[10] = { 1,2,3,4,5,6,7,8,9};
	int sz = sizeof(arr) / sizeof(arr[0]);
	//Init(arr, sz);
	Print(arr, sz);
	Reverse(arr, sz);
	Print(arr, sz);
	return 0;
}*/
/*int main()
{
	int arr1[] = { 1,3,5,7,9 };
	int arr2[] = { 2,4,6,8,0 };
	int tmp = 0;
	int i = 0;
	int sz = sizeof(arr1) / sizeof(arr1[0]);
	for (i = 0;i < sz;i++)
	{
		tmp = arr1[i];
		arr1[i] = arr2[i];
		arr2[i] = tmp;
	}
	return 0;
}*/
/*int main()
{
	int arr[] = { 1,2,3,4,5 };
	short* p = (short*)arr;
	int i = 0;
	for (i = 0;i < 4;i++)
	{
		*(p + i) = 0;
	}
	for (i = 0;i < 5;i++)
	{
		printf("%d", arr[i]);
	}
}*/
/*int i;
int main()
{
	i--;
	if (i > sizeof(i))
	{
		printf(">\n");
	}
	else
	{
		printf("<\n");
	}
	return 0;
}*/
/*int main()
{
	int a, b, c;
	a = 5;
	c = ++a;
	b = ++c, c++, ++a, a++;
	b += a++ + c;
	printf("a=%d b=%d c=%d\n", a, b, c);
	return 0;
}*/
/*int count_bit_one(int n)
{
	int count = 0;
	//int i = 0;
	//for(i=0;i<32;i++)
		while (n)
		{
			//if (((n >> i) & 1) == 1)
			//{
				//count++;
			//}
			n = n & (n - 1);
			count++;
	     }
	return count;
}*/
/*int main()
{
	int a = 0;
	scanf_s("%d", &a);
	//写一个函数求a的二进制（补码）表示中有几个1
	int count=count_bit_one(a);
	printf("count=%d\n", count);
	return 0;
}*/
//int get_diff_bit(int m,int n);
//{
	//int tmp = m ^ n;
	//int count = 0;
	//return count_bit_one(tmp);
	//while (tmp)
	//{
	//	tmp = tmp & (tmp - 1);
//		count++;
	//}
	//return count;
//}
/*int main()
{
	int m = 0;
	int n = 0;
	scanf_s("%d%d", &m, &n);
	int count=get_diff_bit(m, n);
	printf("count=%d\n", count);
		return 0;
}*/
/*void print(int m)
{
	int i = 0;
	printf("奇数位：\n");
	for (i = 30;i >= 0;i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
	printf("偶数位：\n");
	for (i = 31;i >= 0;i -= 2)
	{
		printf("%d ", (m >> i) & 1);
	}
	printf("\n");
}
int main()
{
	int m = 0;
	scanf_s("%d", &m);
	print(m);
	return 0;
}*/
/*void print(int* p, int sz)
{
	int i = 0;
	for (i = 0;i < sz;i++)
	{
		printf("%d ", *(p + i));
	}
}

int main()
{
	int arr[] = { 1,2,3,4,5,6,7,8,9 };
	int sz = sizeof(arr) / sizeof(arr[0]);
	print(arr, sz);
	return 0;
}*/
/*void print_table(int n)
{
	int i = 0;

	for (i = 1;i <= n;i++)
	{
		int j = 0;
		for (j = 1;j <= i;j++)
		{
			printf("%d*%d=%-3d ", i, j, i * j);
		}
		printf("\n");
	}

}
int main()
{
	int n = 0;
	scanf_s("%d", &n);
	print_table(n);
	return 0;
}*/
/*void reverse_string(char arr[])
{
	int left = 0;
	int right = strlen(arr)-1;
	
	while (left < right)
	{
		int tmp = arr[left];
		arr[left] = arr[right];
		arr[right] = tmp;
		left++;
		right--;
	}
	printf("%s\n", arr);
}*/

/*void reverse_string(char arr[])
{
	char tmp = arr[0];
	
		reverse_string(arr + 1);
}
int main()
{
	char arr[] = "abcdef";
	reverse_string(arr);
	return 0;
	
}*/
/*int DigitSum(unsigned int num)
{
	if (num > 9)
	{
		return DigitSum(num / 10) + num % 10;
	}
	else
	{
		return num;
	}
}
int main()
{
	unsigned int num = 0;
	scanf_s("%d", &num);
	int ret=DigitSum(num);
	printf("ret=%d\n", ret);
	return 0;
}*/
/*int main()
{
	int i, n;
	double sum = 1;
	scanf_s("%d", &n);
	for (i = 1;i <= n;i++)
		sum = sum * i;
	printf("%d!=%lf", n, sum);
	printf("\n");
	return 0;
}*/

/*int fun(int a)
{
	if (a <= 1)
		return 1;
	return(a * fun(a - 1));
}
int main()
{
	int a = 0;
	int b = 0;
	scanf_s("%d", &a);
	b = fun(a);
	printf("%d!=%d\n", a, b);
	return 0;
}*/
/*int ret(int a)
{
	int b = 0;
	int i = 0;
	for (i = 0;i <= 4;i++)
	{
		b = a % 10;
	 }
	return b;
	
}
int main()
{
	int a = 0;//初始化变量
	scanf_s("%d", &a);
	int ret = sum(a);
	printf("%d", ret);
	return 0;
}*/
/*double Pow(int n, int k)
{
	if (k < 0)
		return(1.0 / Pow(n, -k));
	else if (k == 0)
		return 1;
	else
		return n * Pow(n, k - 1);
}
int main()
{
	int n = 0;
	int k = 0;
	scanf_s("%d%d", &n, &k);
	double ret = Pow(n, k);
	printf("ret=%lf", ret);
	return 0;
}*/
//描述一个学生-一些数据
//名字
//年龄
//电话
//性别

//struct 结构体关键字 Stu-结构体标签 struct Stu-结构体类型
/*typedef struct Stu
{
	//成员变量
	char name[20];
	short age;
	char tele[12];
	char sex[5];

}Stu;
//s1,s2,s3;//s1,s2,s3是三个全局的结构变量
int main()
{
	struct Stu s2={"旺财",30,"161613","保密"};
	Stu s1 = {"张三",20,"1521111","男"};//局部变量
	return 0;
}*/
/*struct Point
{
	int x;
	int y;
}p1;
struct Point p2;*/

/*struct S
{
	int a;
	char c;
	char arr[20];
	double d;
};

struct T
{
	char ch[10];
	struct S s;
	char* pc;
};
int main()
{
	char arr[] = "hello bit\n";
	struct T t = { "hehe",{100,'w',"hello world",3.14 }, arr };
	printf("%s\n", t.ch);
	printf("%s\n", t.s.arr);
	printf("%lf\n", t.s.d);
	printf("%s\n", t.pc);
	return 0;
}*/
/*typedef struct Stu
{
	//成员变量
	char name[20];
	short age;
	char tele[12];
	char sex[5];
}Stu;
void Print1(Stu tmp)
{
	printf("name:%s\n", tmp.name);
	printf("age:%d\n", tmp.age);
	printf("tele:%s\n", tmp.tele);
	printf("sex:%s\n", tmp.sex);
}
void Print2(Stu*ps)
{
	printf("name:%s\n", ps->name);
	printf("name:%s\n", ps->age);
	printf("name:%s\n", ps->tele);
	printf("name:%s\n", ps->sex);
}
int main()
{
	Stu s = { "李四",40,"155555555","男" };
	Print1(s);
	Print2(&s);
	return 0;
}*/
/*Add(int x, int y)
{
	int z = 0;
	z = x + y;
	return z;
}

int main()
{
	int a = 10;
	int b = 20;
	int ret = 0;
	ret = Add(a, b);

	return 0;
}*/
/*int main()
{
	int i = 0;
	for (i = 0;i < 100;i++)
	{
		printf("%d\n", i);
	}
	system("pause");
	return 0;
}*/
/*int main()
{
	int i =0 ;
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	for (i = 0;i <= 10;i++)
	{
		printf("hehe\n");
		arr[i] = 0;
	}
	return 0;
}*/
/*int main()
{
	int i = 0;
	for (i = 0;i < 100;i++)
	{
		printf("%d", i);
	}
	for (i = 0;i < 100;i++)
	{
		printf("%d", 10 - i);
	}
	return 0;
}*/
/*int Add(int x, int y)
{
	return x + y;
}
int main()
{
	printf("hehe\n");
	int a = 20;
	int b = 10;
	int c = Add(a, b);

	return 0;
}*/
/*int main()
{
	{
		int tmp = 0;
		printf("tmp=%d\n", tmp);
	}
	int arr[10] = { 0 };
	int i = 0;
	for (i = 0;i < 10;i++)
	{
		arr[i] = i;
	}
	return 0;
}*/
/*void test2()
{
	printf("hehe\n");
}
void test1()
{
	test2();
}
void test()
{
	test1();
}
int main()
{
	test();
	return 0;
}*/
/*int main()
{
	int i = 0;
	int sum = 0;
	int n = 0;
	int ret = 1;
	scanf_s("%d", &n);

	for (i = 1;i <= n;i++)
	{
		int j = 0;
		ret = 1;
		for (j = 1;j <= i;j++)
		{
			ret *= j;
		}
		sum += ret;
	}
	printf("%d\n", sum);
	return 0;
}*/
/*int main()
{
	int i = 0;
	int arr[10] = { 0 };
	for (i = 0;i <= 12;i++)
	{
		arr[i] = 0;
		printf("hehe\n");
	}
	return 0;
}*/
/*int main()
{
	int i = 0;
	int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };
	
	printf("%p\n", arr);
	printf("%p\n", &i);
	return 0;
}*/
/*struct studentList
{
	char Name[5];
	char Age;
	char Gender;
}studentlist;





int main()
{
	struct studentList a;

	a.Age = 18;
	a.Gender = 1;

	
	return 0;
}*/

//#include<stdio.h>
//int main()
//{
//	int a = 0;
//	int b = 0;
//	int c = 0;
//	scanf_s("%d %d",&a, &b);
//	if (a >= b)
//	{
//		printf("%d", a);
//	}
//	else
//	{
//		printf("%d", b);
//	}
//	return 0;
//}
#include<stdio.h>
//int main()
//{
//	int x = 0;
//	scanf_s("%d\n", &x);
//	if (x < 0)
//	{
//		printf("1");
//	}
//	else if (x ==0)
//	{
//		printf("0");
//	}
//	else
//	{
//		printf("-1");
//	}
//
//	return 0;
//}
//
/*void my_strcpy(char* dest, char* src)
{
	while (*src != '\0')
	{
		*dest = *src;
		src++;
		dest++;
	}
	*dest = *src;
}*/
#include<assert.h>
//char* my_strcpy(char* dest, const char* src)
//{
//	char* ret = dest;
//	assert(dest != NULL);//断言
//	assert(src != NULL);
//	while (*dest++ = *src++)
//	{
//		;
//	}
//	return ret;
//}
//
//int main()
//{
//	char arr1[] = "#############";
//	char arr2[] = "bit";
//	printf("%s\n", my_strcpy(arr1, arr2));
//	return 0;
//}
//int main()
//{
//	const int num = 10;
//	 int* const p = &num;
//	*p = 20;
//	printf("%d\n", num);
//	return 0;
//}
//int my_strlen(const char*str)
//{
//	int count = 0;
//	assert(str != NULL);
//	while (*str != '\0')
//	{
//		count++;
//		str++;
//	}
//	return count;
//}
//
//int main()
//{
//	char arr[] = "abcdef";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}
//int Add(int x, int y)
//{
//	return x + y;
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}
//int check_sys()
//{
//	int i = 1;
//	return (*(char*)&i);
//}
//int main()
//{
//	int ret = check_sys();
//	if (ret == 1)
//	{
//		printf("小端\n");
//	}
//	else
//	{
//		printf("大端\n");
//	}
//	return 0;
//}
//int main()
//{
//	int a = 0x11223344;
//	int* p = &a;
//	*p = 0;
//	return 0;
//}
//int main()
//{
//	char a = -1;
//	signed char b = -1;
//	unsigned char c = -1;
//	printf("a=%d,b=%d,c=%d", a, b, c);
//	return 0;
//}
/*int main()
{
	char a = 128;
	printf("%u\n", a);
	return 0;
}*/

/*int main()
{
	int i = -20;
	unsigned int j = 10;
	printf("%d\n", i + j);
	return 0;
}*/

//int main()
//{
//	unsigned int i;
//	for (i = 9;i >= 0;i--);
//	{
//		printf("%u\n", i);
//	}
//	return 0;
//}
/*int main()
{
	char a[1000];
	int i;
	for (i = 0;i < 1000;i++)
	{
		a[i] = -1 - i;
	}
	printf("%d", strlen(a));
	return 0;
}*/
//unsigned char i = 0;
//int main()
//{
//	for (i = 0;i <= 255;i++)
//	{
//		printf("hello world\n");
//	}
//	return 0;
//}
/*int main()
{
	double d = 1E10;
	printf("%lf\n", d);
	return 0;
}*/
//int main()
//{
//	int n = 9;
//	float* pFlaot = (float*)&n;
//	printf("n的值为：%d\n", n);
//	printf("*pFloat的值为：%f\n", *pFlaot);
//
//	*pFlaot = 9.0;
//	printf("num的值为：%d\n", n);
//	printf("pFloat的值为：%f\n", *pFlaot);
//	return 0;
//}

//void test(int arr[])
//{
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	printf("%d\n", sz);
//}
//int  main()
//{
//	int arr[10] = { 0 };
//	test(arr);
//	return 0;
// }
//int main()
//{
//	char arr[] = "abcdef";
//	char* pc = arr;
//	printf("%s\n", arr);
//	printf("%s\n", pc);
//	return 0;
//}
//int main()
//{
//	char* p = "abcdef";
//	*p = 'w';
//	printf("%s\n", p);
//	return 0;
//}
//int main()
//{
//	char arr1[] = "abcdef";
//	char arr2[] = "acbdef";
//	char* p1 = "abcdef";
//	char* p2 = "abcdef";
//	if (p1 == p2)
//	{
//		printf("hehe\n");
//	}
//	else
//	{
//		printf("haha\n");
//	}
//	return 0;
	/*if (arr1 ==arr2)
	{
		printf("hehe\n");
	}
	else
	{
		printf("haha\n");
	}
	return 0;*/
//}
//int main()
//{
//	int a = 10;
//	int b = 20;
//	int c = 30;
//	int d = 40;
//	int* arr[4] = { &a,&b,&c,&d };
//	int i = 0;
//	for (i = 0;i < 4;i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//int main()
//{
//	int arr1[] = { 1,2,3,4,5 };
//	int arr2[] = { 2,3,4,5,6 };
//	int arr3[] = { 3,4,5,6,7 };
//	int* parr[] = { arr1,arr2,arr3 };
//	int i = 0;
//	for (i = 0;i < 3;i++)
//	{
//		int j = 0;
//		for (j = 0;j < 5;j++)
//		{
//			printf("%d", *(parr[i] + j));
//		}
//		printf("\n");
//	}
//	return 0;
//}
int main()
{
	//int* p = NULL;//p是整形指针-指向整形的指针-可以存放整形的地址
	//char* pc = NULL;//pc是字符指针-指向字符的指针-可以存放字符的地址
	//                //数组指针-指向数组的指针-存放数组的地址
	//int arr[10] = { 0 };
	//arr-首元素地址
	return 0;
}
